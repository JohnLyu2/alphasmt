(if (> num-exprs 377) (if (> size 464) (if (> num-exprs 2328) (if (> num-exprs 2979) (if (> size 503) (if (> num-consts 91) (then (using-params simplify :blast_distinct false :elim_and false :flat false :hi_div0 true :hoist_mul false :local_ctx true :som true) max-bv-sharing (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 true :hoist_mul false :local_ctx false :som true) lia2card (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 true :hoist_mul false :local_ctx false :som true) (using-params nla2bv :nla2bv_max_bv_size 6) smt) (then (using-params simplify :blast_distinct false :elim_and false :flat false :hi_div0 true :hoist_mul false :local_ctx true :som true) max-bv-sharing (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 true :hoist_mul false :local_ctx false :som true) lia2card (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 true :hoist_mul false :local_ctx false :som true) (using-params nla2bv :nla2bv_max_bv_size 6) smt)) (then (using-params simplify :blast_distinct false :elim_and false :flat false :hi_div0 true :hoist_mul false :local_ctx true :som true) max-bv-sharing (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 true :hoist_mul false :local_ctx false :som true) lia2card (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 true :hoist_mul false :local_ctx false :som true) (using-params nla2bv :nla2bv_max_bv_size 6) smt)) (then (using-params simplify :blast_distinct false :elim_and false :flat false :hi_div0 true :hoist_mul false :local_ctx true :som true) max-bv-sharing (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 true :hoist_mul false :local_ctx false :som true) lia2card (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 true :hoist_mul false :local_ctx false :som true) (using-params nla2bv :nla2bv_max_bv_size 6) smt)) (then (using-params simplify :blast_distinct false :elim_and false :flat false :hi_div0 true :hoist_mul false :local_ctx true :som true) max-bv-sharing (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 true :hoist_mul false :local_ctx false :som true) lia2card (using-params simplify :blast_distinct false :elim_and true :flat true :hi_div0 true :hoist_mul false :local_ctx false :som true) (using-params nla2bv :nla2bv_max_bv_size 6) smt)) (if (> num-consts 91) (then (using-params simplify :blast_distinct true :elim_and true :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) elim-uncnstr lia2card (if (> num-consts 6) (if (> num-consts 7) (if (> num-consts 8) (if (> num-consts 9) (if (> num-consts 10) (if (> num-consts 11) (if (> num-consts 14) (if (> num-consts 16) (if (> num-consts 22) (if (> num-consts 32) (if (> num-consts 56) (if (> num-consts 63) (if (> num-consts 72) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (if (> num-exprs 490) (if (> num-exprs 755) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt))) (if (> num-exprs 282) (if (> num-exprs 377) (if (> num-exprs 490) (if (> num-exprs 755) (then cofactor-term-ite propagate-values ctx-simplify smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt))) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (if (> num-exprs 43) (then cofactor-term-ite propagate-values ctx-simplify smt) (then cofactor-term-ite propagate-values ctx-simplify smt)))) (if (> size 90) (if (> num-consts 22) (if (> num-exprs 2979) (then (using-params simplify :blast_distinct true :elim_and true :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) elim-uncnstr lia2card (if (> num-consts 6) (if (> num-consts 7) (if (> num-consts 8) (if (> num-consts 9) (if (> num-consts 10) (if (> num-consts 11) (if (> num-consts 14) (if (> num-consts 16) (if (> num-consts 22) (if (> num-consts 32) (if (> num-consts 56) (if (> num-consts 63) (if (> num-consts 72) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (if (> num-exprs 490) (if (> num-exprs 755) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt))) (if (> num-exprs 282) (if (> num-exprs 377) (if (> num-exprs 490) (if (> num-exprs 755) (then cofactor-term-ite propagate-values ctx-simplify smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt))) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (if (> num-exprs 43) (then cofactor-term-ite propagate-values ctx-simplify smt) (then cofactor-term-ite propagate-values ctx-simplify smt)))) (if (> num-consts 56) (then (using-params simplify :blast_distinct true :elim_and true :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) elim-uncnstr lia2card (if (> num-consts 6) (if (> num-consts 7) (if (> num-consts 8) (if (> num-consts 9) (if (> num-consts 10) (if (> num-consts 11) (if (> num-consts 14) (if (> num-consts 16) (if (> num-consts 22) (if (> num-consts 32) (if (> num-consts 56) (if (> num-consts 63) (if (> num-consts 72) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (if (> num-exprs 490) (if (> num-exprs 755) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt))) (if (> num-exprs 282) (if (> num-exprs 377) (if (> num-exprs 490) (if (> num-exprs 755) (then cofactor-term-ite propagate-values ctx-simplify smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt))) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (if (> num-exprs 43) (then cofactor-term-ite propagate-values ctx-simplify smt) (then cofactor-term-ite propagate-values ctx-simplify smt)))) (if (> num-exprs 1412) (then (using-params simplify :blast_distinct true :elim_and true :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) elim-uncnstr lia2card (if (> num-consts 6) (if (> num-consts 7) (if (> num-consts 8) (if (> num-consts 9) (if (> num-consts 10) (if (> num-consts 11) (if (> num-consts 14) (if (> num-consts 16) (if (> num-consts 22) (if (> num-consts 32) (if (> num-consts 56) (if (> num-consts 63) (if (> num-consts 72) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (if (> num-exprs 490) (if (> num-exprs 755) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt))) (if (> num-exprs 282) (if (> num-exprs 377) (if (> num-exprs 490) (if (> num-exprs 755) (then cofactor-term-ite propagate-values ctx-simplify smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt))) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (if (> num-exprs 43) (then cofactor-term-ite propagate-values ctx-simplify smt) (then cofactor-term-ite propagate-values ctx-simplify smt)))) (if (> num-exprs 490) (if (> num-consts 32) (if (> num-exprs 755) (then (using-params simplify :blast_distinct true :elim_and true :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) elim-uncnstr lia2card (if (> num-consts 6) (if (> num-consts 7) (if (> num-consts 8) (if (> num-consts 9) (if (> num-consts 10) (if (> num-consts 11) (if (> num-consts 14) (if (> num-consts 16) (if (> num-consts 22) (if (> num-consts 32) (if (> num-consts 56) (if (> num-consts 63) (if (> num-consts 72) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (if (> num-exprs 490) (if (> num-exprs 755) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt))) (if (> num-exprs 282) (if (> num-exprs 377) (if (> num-exprs 490) (if (> num-exprs 755) (then cofactor-term-ite propagate-values ctx-simplify smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt))) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (if (> num-exprs 43) (then cofactor-term-ite propagate-values ctx-simplify smt) (then cofactor-term-ite propagate-values ctx-simplify smt)))) (then (using-params simplify :blast_distinct true :elim_and true :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) elim-uncnstr lia2card (if (> num-consts 6) (if (> num-consts 7) (if (> num-consts 8) (if (> num-consts 9) (if (> num-consts 10) (if (> num-consts 11) (if (> num-consts 14) (if (> num-consts 16) (if (> num-consts 22) (if (> num-consts 32) (if (> num-consts 56) (if (> num-consts 63) (if (> num-consts 72) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (if (> num-exprs 490) (if (> num-exprs 755) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt))) (if (> num-exprs 282) (if (> num-exprs 377) (if (> num-exprs 490) (if (> num-exprs 755) (then cofactor-term-ite propagate-values ctx-simplify smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt))) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (if (> num-exprs 43) (then cofactor-term-ite propagate-values ctx-simplify smt) (then cofactor-term-ite propagate-values ctx-simplify smt))))) (then (using-params simplify :blast_distinct true :elim_and true :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) elim-uncnstr lia2card (if (> num-consts 6) (if (> num-consts 7) (if (> num-consts 8) (if (> num-consts 9) (if (> num-consts 10) (if (> num-consts 11) (if (> num-consts 14) (if (> num-consts 16) (if (> num-consts 22) (if (> num-consts 32) (if (> num-consts 56) (if (> num-consts 63) (if (> num-consts 72) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (if (> num-exprs 490) (if (> num-exprs 755) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt))) (if (> num-exprs 282) (if (> num-exprs 377) (if (> num-exprs 490) (if (> num-exprs 755) (then cofactor-term-ite propagate-values ctx-simplify smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt))) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (if (> num-exprs 43) (then cofactor-term-ite propagate-values ctx-simplify smt) (then cofactor-term-ite propagate-values ctx-simplify smt))))) (then (using-params simplify :blast_distinct true :elim_and true :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) elim-uncnstr lia2card (if (> num-consts 6) (if (> num-consts 7) (if (> num-consts 8) (if (> num-consts 9) (if (> num-consts 10) (if (> num-consts 11) (if (> num-consts 14) (if (> num-consts 16) (if (> num-consts 22) (if (> num-consts 32) (if (> num-consts 56) (if (> num-consts 63) (if (> num-consts 72) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (if (> num-exprs 490) (if (> num-exprs 755) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt))) (if (> num-exprs 282) (if (> num-exprs 377) (if (> num-exprs 490) (if (> num-exprs 755) (then cofactor-term-ite propagate-values ctx-simplify smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt))) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (if (> num-exprs 43) (then cofactor-term-ite propagate-values ctx-simplify smt) (then cofactor-term-ite propagate-values ctx-simplify smt)))))))) (then (using-params simplify :blast_distinct true :elim_and false :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) propagate-values smt)) (then (using-params simplify :blast_distinct true :elim_and true :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) elim-uncnstr lia2card (if (> num-consts 6) (if (> num-consts 7) (if (> num-consts 8) (if (> num-consts 9) (if (> num-consts 10) (if (> num-consts 11) (if (> num-consts 14) (if (> num-consts 16) (if (> num-consts 22) (if (> num-consts 32) (if (> num-consts 56) (if (> num-consts 63) (if (> num-consts 72) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (if (> num-exprs 490) (if (> num-exprs 755) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt))) (if (> num-exprs 282) (if (> num-exprs 377) (if (> num-exprs 490) (if (> num-exprs 755) (then cofactor-term-ite propagate-values ctx-simplify smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt))) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (if (> num-exprs 43) (then cofactor-term-ite propagate-values ctx-simplify smt) (then cofactor-term-ite propagate-values ctx-simplify smt))))))) (if (> num-exprs 61) (if (> num-consts 11) (if (> num-exprs 92) (if (> num-consts 32) (then (using-params simplify :blast_distinct true :elim_and false :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) propagate-values smt) (if (> size 49) (if (> size 65) (then (using-params simplify :blast_distinct true :elim_and true :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) elim-uncnstr lia2card (if (> num-consts 6) (if (> num-consts 7) (if (> num-consts 8) (if (> num-consts 9) (if (> num-consts 10) (if (> num-consts 11) (if (> num-consts 14) (if (> num-consts 16) (if (> num-consts 22) (if (> num-consts 32) (if (> num-consts 56) (if (> num-consts 63) (if (> num-consts 72) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (if (> num-exprs 490) (if (> num-exprs 755) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt))) (if (> num-exprs 282) (if (> num-exprs 377) (if (> num-exprs 490) (if (> num-exprs 755) (then cofactor-term-ite propagate-values ctx-simplify smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt))) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (if (> num-exprs 43) (then cofactor-term-ite propagate-values ctx-simplify smt) (then cofactor-term-ite propagate-values ctx-simplify smt)))) (if (> num-consts 16) (if (> num-exprs 282) (then (using-params simplify :blast_distinct true :elim_and false :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) propagate-values smt) (then (using-params simplify :blast_distinct true :elim_and false :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) propagate-values smt)) (then (using-params simplify :blast_distinct true :elim_and false :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) propagate-values smt))) (if (> num-consts 16) (if (> num-exprs 98) (if (> num-consts 22) (then (using-params simplify :blast_distinct true :elim_and false :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) propagate-values smt) (then (using-params simplify :blast_distinct true :elim_and false :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) propagate-values smt)) (then (using-params simplify :blast_distinct true :elim_and false :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) propagate-values smt)) (if (> num-consts 14) (then (using-params simplify :blast_distinct true :elim_and true :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) elim-uncnstr lia2card (if (> num-consts 6) (if (> num-consts 7) (if (> num-consts 8) (if (> num-consts 9) (if (> num-consts 10) (if (> num-consts 11) (if (> num-consts 14) (if (> num-consts 16) (if (> num-consts 22) (if (> num-consts 32) (if (> num-consts 56) (if (> num-consts 63) (if (> num-consts 72) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (if (> num-exprs 490) (if (> num-exprs 755) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt))) (if (> num-exprs 282) (if (> num-exprs 377) (if (> num-exprs 490) (if (> num-exprs 755) (then cofactor-term-ite propagate-values ctx-simplify smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt))) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (if (> num-exprs 43) (then cofactor-term-ite propagate-values ctx-simplify smt) (then cofactor-term-ite propagate-values ctx-simplify smt)))) (then (using-params simplify :blast_distinct true :elim_and true :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) elim-uncnstr lia2card (if (> num-consts 6) (if (> num-consts 7) (if (> num-consts 8) (if (> num-consts 9) (if (> num-consts 10) (if (> num-consts 11) (if (> num-consts 14) (if (> num-consts 16) (if (> num-consts 22) (if (> num-consts 32) (if (> num-consts 56) (if (> num-consts 63) (if (> num-consts 72) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (if (> num-exprs 490) (if (> num-exprs 755) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt))) (if (> num-exprs 282) (if (> num-exprs 377) (if (> num-exprs 490) (if (> num-exprs 755) (then cofactor-term-ite propagate-values ctx-simplify smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt))) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (if (> num-exprs 43) (then cofactor-term-ite propagate-values ctx-simplify smt) (then cofactor-term-ite propagate-values ctx-simplify smt)))))))) (then (using-params simplify :blast_distinct true :elim_and false :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) propagate-values smt)) (if (> num-consts 8) (if (> size 19) (if (> num-consts 9) (then (using-params simplify :blast_distinct true :elim_and true :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) elim-uncnstr lia2card (if (> num-consts 6) (if (> num-consts 7) (if (> num-consts 8) (if (> num-consts 9) (if (> num-consts 10) (if (> num-consts 11) (if (> num-consts 14) (if (> num-consts 16) (if (> num-consts 22) (if (> num-consts 32) (if (> num-consts 56) (if (> num-consts 63) (if (> num-consts 72) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (if (> num-exprs 490) (if (> num-exprs 755) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt))) (if (> num-exprs 282) (if (> num-exprs 377) (if (> num-exprs 490) (if (> num-exprs 755) (then cofactor-term-ite propagate-values ctx-simplify smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt))) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (if (> num-exprs 43) (then cofactor-term-ite propagate-values ctx-simplify smt) (then cofactor-term-ite propagate-values ctx-simplify smt)))) (then (using-params simplify :blast_distinct true :elim_and false :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) propagate-values smt)) (then (using-params simplify :blast_distinct true :elim_and true :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) elim-uncnstr lia2card (if (> num-consts 6) (if (> num-consts 7) (if (> num-consts 8) (if (> num-consts 9) (if (> num-consts 10) (if (> num-consts 11) (if (> num-consts 14) (if (> num-consts 16) (if (> num-consts 22) (if (> num-consts 32) (if (> num-consts 56) (if (> num-consts 63) (if (> num-consts 72) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (if (> num-exprs 490) (if (> num-exprs 755) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt))) (if (> num-exprs 282) (if (> num-exprs 377) (if (> num-exprs 490) (if (> num-exprs 755) (then cofactor-term-ite propagate-values ctx-simplify smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt))) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (if (> num-exprs 43) (then cofactor-term-ite propagate-values ctx-simplify smt) (then cofactor-term-ite propagate-values ctx-simplify smt))))) (if (> num-consts 7) (then (using-params simplify :blast_distinct true :elim_and true :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) elim-uncnstr lia2card (if (> num-consts 6) (if (> num-consts 7) (if (> num-consts 8) (if (> num-consts 9) (if (> num-consts 10) (if (> num-consts 11) (if (> num-consts 14) (if (> num-consts 16) (if (> num-consts 22) (if (> num-consts 32) (if (> num-consts 56) (if (> num-consts 63) (if (> num-consts 72) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (if (> num-exprs 490) (if (> num-exprs 755) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt))) (if (> num-exprs 282) (if (> num-exprs 377) (if (> num-exprs 490) (if (> num-exprs 755) (then cofactor-term-ite propagate-values ctx-simplify smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt))) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (if (> num-exprs 43) (then cofactor-term-ite propagate-values ctx-simplify smt) (then cofactor-term-ite propagate-values ctx-simplify smt)))) (then (using-params simplify :blast_distinct true :elim_and true :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) elim-uncnstr lia2card (if (> num-consts 6) (if (> num-consts 7) (if (> num-consts 8) (if (> num-consts 9) (if (> num-consts 10) (if (> num-consts 11) (if (> num-consts 14) (if (> num-consts 16) (if (> num-consts 22) (if (> num-consts 32) (if (> num-consts 56) (if (> num-consts 63) (if (> num-consts 72) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (if (> num-exprs 490) (if (> num-exprs 755) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt))) (if (> num-exprs 282) (if (> num-exprs 377) (if (> num-exprs 490) (if (> num-exprs 755) (then cofactor-term-ite propagate-values ctx-simplify smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt))) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (if (> num-exprs 43) (then cofactor-term-ite propagate-values ctx-simplify smt) (then cofactor-term-ite propagate-values ctx-simplify smt))))))) (if (> size 8) (if (> num-consts 7) (then (using-params simplify :blast_distinct true :elim_and false :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) propagate-values smt) (then (using-params simplify :blast_distinct true :elim_and true :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) elim-uncnstr lia2card (if (> num-consts 6) (if (> num-consts 7) (if (> num-consts 8) (if (> num-consts 9) (if (> num-consts 10) (if (> num-consts 11) (if (> num-consts 14) (if (> num-consts 16) (if (> num-consts 22) (if (> num-consts 32) (if (> num-consts 56) (if (> num-consts 63) (if (> num-consts 72) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (if (> num-exprs 490) (if (> num-exprs 755) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt)) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt))) (if (> num-exprs 282) (if (> num-exprs 377) (if (> num-exprs 490) (if (> num-exprs 755) (then cofactor-term-ite propagate-values ctx-simplify smt) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then max-bv-sharing (using-params nla2bv :nla2bv_max_bv_size 100) smt))) (then bit-blast cofactor-term-ite propagate-values ctx-simplify solve-eqs smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (then cofactor-term-ite propagate-values ctx-simplify smt)) (if (> num-exprs 43) (then cofactor-term-ite propagate-values ctx-simplify smt) (then cofactor-term-ite propagate-values ctx-simplify smt))))) (then (using-params simplify :blast_distinct true :elim_and false :flat false :hi_div0 false :hoist_mul false :local_ctx false :som true) propagate-values smt))))